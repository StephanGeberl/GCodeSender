/*
    Copyright 2020 Stephan Geberl

    This file is part of Universal Gcode Sender (UGS) (5 Axis-Version).

    UGS is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    UGS is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with UGS.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.geberl.gcodesender.uielements.components;

import javax.swing.*;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

import java.util.List;

import com.geberl.gcodesender.connection.ConnectionFactory;
import com.geberl.gcodesender.listeners.ControllerListener;
import com.geberl.gcodesender.listeners.ControllerState;
import com.geberl.gcodesender.listeners.ControllerStatus;
import com.geberl.gcodesender.listeners.UGSEventListener;
import com.geberl.gcodesender.model.BaudRateEnum;
import com.geberl.gcodesender.model.Position;
import com.geberl.gcodesender.model.UGSEvent.ControlState;
import com.geberl.gcodesender.types.GcodeCommand;
import com.geberl.gcodesender.model.Alarm;
import com.geberl.gcodesender.model.BackendAPI;
import com.geberl.gcodesender.utils.Settings;
import com.geberl.gcodesender.utils.SettingsFactory;

import static com.geberl.gcodesender.utils.GUIHelpers.displayErrorDialog;

import java.awt.Color;
import java.awt.Font;

public class ConnectionPanel extends JPanel implements ControllerListener, UGSEventListener {
	
	// Breite: 190
	// HÃ¶he: 160

	private final BackendAPI backend;
    private Settings settings;
    private int tempMode = -1;
    
    private JComboBox commPortComboBox = new JComboBox();
    private JComboBox baudrateSelectionComboBox = new JComboBox();
    private JButton opencloseButton = new JButton("Open");
    private JButton refreshButton = new JButton("");
    private JSlider modeSlider = new JSlider();
    private JLabel lblHotwireMode = new JLabel("HotWire Mode");
    private JLabel lblMillMode = new JLabel("Mill Mode");
    
    public ConnectionPanel(BackendAPI backend) {

    	this.backend = backend;
        this.settings = SettingsFactory.loadSettings();
        this.loadPortSelector();
        commPortComboBox.setSelectedItem(settings.getPort());
        baudrateSelectionComboBox.setModel(new javax.swing.DefaultComboBoxModel(BaudRateEnum.getAllBaudRates()));
        baudrateSelectionComboBox.setSelectedItem(settings.getPortRate());

        initComponents();
 
        if (this.backend != null) {
        	
            this.backend.addUGSEventListener(this);
            this.backend.addControllerListener(this);
             
        }
        
        this.setMachineModeDeactivated();
    }
	
    private void initComponents() {
        
        setLayout(null);
        
        JLabel lblPort = new JLabel("Port");
        lblPort.setBounds(6, 11, 44, 15);
        add(lblPort);
        
        JLabel lblNewLabel = new JLabel("Baud");
        lblNewLabel.setBounds(6, 38, 44, 15);
        add(lblNewLabel);
        
        
        lblHotwireMode.setFont(new Font("DejaVu Sans", Font.BOLD, 12));
        lblHotwireMode.setBounds(81, 97, 102, 15);
        lblHotwireMode.setForeground(Color.BLACK);
        add(lblHotwireMode);
        
        
        lblMillMode.setFont(new Font("DejaVu Sans", Font.BOLD, 12));
        lblMillMode.setBounds(81, 121, 102, 15);
        lblMillMode.setForeground(Color.BLACK);
        add(lblMillMode);
        
        commPortComboBox.setBounds(55, 6, 128, 24);
        add(commPortComboBox);
        baudrateSelectionComboBox.setBounds(55, 33, 128, 24);
        baudrateSelectionComboBox.setToolTipText("Select baudrate to use for the serial port.");        
        add(baudrateSelectionComboBox);
        
        opencloseButton.setBounds(81, 60, 102, 25);
        add(opencloseButton);
        opencloseButton.setText("Open");
        opencloseButton.addActionListener(new java.awt.event.ActionListener() {
            @Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
                opencloseButtonActionPerformed(evt);
            }
        });
        
        refreshButton.setToolTipText("Reload Ports");
        refreshButton.setBounds(55, 60, 27, 25);
        add(refreshButton);
        refreshButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/refresh.gif"))); // NOI18N
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            @Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
            	loadPortSelector();
            }
        });
        
        
        modeSlider.setValue(1);
        modeSlider.setOrientation(SwingConstants.VERTICAL);
        modeSlider.setMaximum(1);
        modeSlider.setBounds(45, 97, 37, 39);
        add(modeSlider);
        
        modeSlider.addChangeListener(new ChangeListener() {
        	public void stateChanged(ChangeEvent arg0) {
                switch (modeSlider.getValue()) {
            	case 0: // Mill
            		setMachineModeMill();
            		break;
            	case 1: // HotWire
               		setMachineModeHotWire();
            		break;
                default:
                    break;
                }
        	}
        });
        
    }

    
    // Scans for comm ports and puts them in the comm port combo box.
    private void loadPortSelector() {
        commPortComboBox.removeAllItems();

        List<String> portList = ConnectionFactory.getPortNames(backend.getSettings().getConnectionDriver());
        if (portList.size() < 1) {
            if (this.settings.isShowSerialPortWarning()) {
                displayErrorDialog("No serial ports found.");
            }
        } else {
            for (String port : portList) { commPortComboBox.addItem(port); }
            commPortComboBox.setSelectedIndex(0);
        }
    }
    
    private void opencloseButtonActionPerformed(java.awt.event.ActionEvent evt) {
        if( this.opencloseButton.getText().equalsIgnoreCase("Open") ) {

            String firmware = "GRBL";
        	String port = commPortComboBox.getSelectedItem().toString();
            int baudRate = Integer.parseInt(baudrateSelectionComboBox.getSelectedItem().toString());
            
            try {
                this.backend.connect(firmware, port, baudRate);
                this.setMachineModeActivated();

            } catch (Exception e) {
                e.printStackTrace();
                displayErrorDialog(e.getMessage());
            }
        } else {
            try {
                this.backend.disconnect();
                this.setMachineModeDeactivated();

            } catch (Exception e) {
            	displayErrorDialog(e.getMessage());
            }
        }
    }
    
    public void updateConnectionControlsStateOpen(boolean isOpen) {

        this.commPortComboBox.setEnabled(!isOpen);
        this.baudrateSelectionComboBox.setEnabled(!isOpen);
        this.refreshButton.setEnabled(!isOpen);

        if (isOpen) {
            this.opencloseButton.setText("Close");
        } else {
            this.opencloseButton.setText("Open");
        }
    }

    public void saveSettings() {
    	settings.setPort(commPortComboBox.getSelectedItem().toString());
    	settings.setPortRate(baudrateSelectionComboBox.getSelectedItem().toString());
    }

    private void setMachineModeHotWire() {
        try {
             tempMode = 1;
             this.backend.killAlarmLock();
             this.backend.switchToHotWire();
             lblHotwireMode.setForeground(Color.RED);
             lblMillMode.setForeground(Color.BLACK);
        } catch (Exception ex) {
        	displayErrorDialog("Error switching machine mode to HotWire.");
        }
     }

     private void setMachineModeMill() {
         try {
             tempMode = 0;
             this.backend.killAlarmLock();
             this.backend.switchToMill();
             lblHotwireMode.setForeground(Color.BLACK);
             lblMillMode.setForeground(Color.RED);
         } catch (Exception ex) {
        	 displayErrorDialog("Error switching machine mode to Mill.");
         }        
     }

     private void setMachineModeDeactivated() {
    	 this.modeSlider.setEnabled(false);
         lblHotwireMode.setForeground(Color.LIGHT_GRAY);
         lblMillMode.setForeground(Color.LIGHT_GRAY);
     }

     private void setMachineModeActivated() {
    	 this.modeSlider.setEnabled(true);
         switch (modeSlider.getValue()) {
         	case 0: // Mill
	           	 lblHotwireMode.setForeground(Color.BLACK);
	             lblMillMode.setForeground(Color.RED);
         		break;
         	case 1: // HotWire
	           	 lblHotwireMode.setForeground(Color.RED);
	             lblMillMode.setForeground(Color.BLACK);
         		break;
         	default:
         		break;
         }
    	 
     }

     private void setModeSlider(ControllerState state) {

     	if (state == ControllerState.ALARM) {
     		this.modeSlider.setEnabled(true);
         } else if (state == ControllerState.UNKNOWN) {
         	this.modeSlider.setEnabled(true);
         } else if (state == ControllerState.HOLD || state == ControllerState.DOOR || state == ControllerState.SLEEP) {
         	this.modeSlider.setEnabled(true);
         } else if (state == ControllerState.RUN || state == ControllerState.JOG || state == ControllerState.HOME) {
         	this.modeSlider.setEnabled(false);
         } else {
         	this.modeSlider.setEnabled(true);
         }

     }

     // Overrides
	 
	@Override
	public void UGSEvent(com.geberl.gcodesender.model.UGSEvent evt) {
		
	    if (evt.isFileChangeEvent() || evt.isStateChangeEvent()) {
	         
	    	// opencloseButton.setEnabled(backend.isIdle());

	    	switch (backend.getControlState()) {
	             case COMM_DISCONNECTED:
	                 this.setModeSlider(ControllerState.UNKNOWN);
	                 this.updateConnectionControlsStateOpen(false);
	                 break;
	             case COMM_IDLE:
	            	 this.updateConnectionControlsStateOpen(true);
	                 break;
	             case COMM_SENDING:
	                 break;
	             case COMM_SENDING_PAUSED:

	                 break;
	             default:
	                 
	         }
	    
	    }
	
	    if (evt.isSettingChangeEvent() && backend.getController() != null && backend.getController().getControllerStatus() != null) {
	        statusStringListener(backend.getController().getControllerStatus());
	    }
		
	}
	
	@Override
	public void statusStringListener(ControllerStatus status) {
		
	    if (status == null) {
	        return;
	    }
	
	    this.setModeSlider( status.getState() );
	    
	    switch (status.getMachineMode()) {
	    	case "HotWire":
	    		if (tempMode < 0) { this.modeSlider.setValue(1); }
	    		else { if (this.modeSlider.getValue() == 1) { tempMode = -1; }; };
	    		break;
	    	case "Mill":
	    		if (tempMode < 0) { this.modeSlider.setValue(0); }
	    		else { if (this.modeSlider.getValue() == 0) { tempMode = -1; }; };
	    		break;
	        default:
	            break;      
	    }
	
		
	}
	
	@Override
	public void controlStateChange(ControlState state) {
		// TODO Auto-generated method stub
		
	}
	
	@Override
	public void fileStreamComplete(String filename, boolean success) {
		// TODO Auto-generated method stub
		
	}
	
	@Override
	public void receivedAlarm(Alarm alarm) {
		// TODO Auto-generated method stub
		
	}
	
	@Override
	public void commandSkipped(GcodeCommand command) {
		// TODO Auto-generated method stub
		
	}
	
	@Override
	public void commandSent(GcodeCommand command) {
		// TODO Auto-generated method stub
		
	}
	
	@Override
	public void commandComplete(GcodeCommand command) {
		// TODO Auto-generated method stub
		
	}
	
	@Override
	public void commandComment(String comment) {
		// TODO Auto-generated method stub
		
	}
	
	@Override
	public void probeCoordinates(Position p) {
		// TODO Auto-generated method stub
		
	}

}
